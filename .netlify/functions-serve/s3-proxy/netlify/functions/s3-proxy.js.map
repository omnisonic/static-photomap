{
  "version": 3,
  "sources": ["../../../../../../Users/omnisonic/Documents/code/MyWebDev/netlify/static-photomap/netlify/functions/s3-proxy.js"],
  "sourceRoot": "/var/folders/p2/rb51ss5j06g5b88970q9ft8r0000gn/T/tmp-70495-cMX8lvdbmZ7U",
  "sourcesContent": ["const { S3Client, GetObjectCommand } = require('@aws-sdk/client-s3');\nconst { getSignedUrl } = require('@aws-sdk/s3-request-presigner');\n\n// Get AWS credentials with fallback logic\n// Local development: use standard AWS variable names\n// Netlify deploys: use custom variable names (since Netlify reserves standard ones)\nconst accessKeyId = process.env.AWS_ACCESS_KEY_ID || process.env.MY_AWS_ACCESS_KEY_ID;\nconst secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY || process.env.MY_AWS_SECRET_ACCESS_KEY;\n\n// Validate environment variables\nif (!accessKeyId) {\n  throw new Error('Missing AWS access key. Set AWS_ACCESS_KEY_ID (local) or MY_AWS_ACCESS_KEY_ID (Netlify)');\n}\nif (!secretAccessKey) {\n  throw new Error('Missing AWS secret key. Set AWS_SECRET_ACCESS_KEY (local) or MY_AWS_SECRET_ACCESS_KEY (Netlify)');\n}\nif (!process.env.S3_REGION) {\n  throw new Error('Missing required env var: S3_REGION');\n}\nif (!process.env.S3_BUCKET) {\n  throw new Error('Missing required env var: S3_BUCKET');\n}\n\nexports.handler = async (event) => {\n  try {\n    const { key } = event.queryStringParameters;\n\n    const s3 = new S3Client({\n      region: process.env.S3_REGION,\n      credentials: {\n        accessKeyId,\n        secretAccessKey\n      }\n    });\n\n    const command = new GetObjectCommand({\n        Bucket: process.env.S3_BUCKET,\n        Key: key\n    });\n\n    const url = await getSignedUrl(s3, command, { expiresIn: 900 });\n    return {\n      statusCode: 200,\n      body: url,\n      headers: { 'Cache-Control': 'public, max-age=300' }\n    };\n  } catch (err) {\n    console.error('S3 Error:', {\n      message: err.message,\n      stack: err.stack,\n      queryParams: event.queryStringParameters\n    });\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        error: err.message,\n        details: 'Check function logs'\n      })\n    };\n  }\n};\n"],
  "mappings": ";AAAA,IAAM,EAAE,UAAU,iBAAiB,IAAI,QAAQ,oBAAoB;AACnE,IAAM,EAAE,aAAa,IAAI,QAAQ,+BAA+B;AAKhE,IAAM,cAAc,QAAQ,IAAI,qBAAqB,QAAQ,IAAI;AACjE,IAAM,kBAAkB,QAAQ,IAAI,yBAAyB,QAAQ,IAAI;AAGzE,IAAI,CAAC,aAAa;AAChB,QAAM,IAAI,MAAM,yFAAyF;AAC3G;AACA,IAAI,CAAC,iBAAiB;AACpB,QAAM,IAAI,MAAM,iGAAiG;AACnH;AACA,IAAI,CAAC,QAAQ,IAAI,WAAW;AAC1B,QAAM,IAAI,MAAM,qCAAqC;AACvD;AACA,IAAI,CAAC,QAAQ,IAAI,WAAW;AAC1B,QAAM,IAAI,MAAM,qCAAqC;AACvD;AAEA,QAAQ,UAAU,OAAO,UAAU;AACjC,MAAI;AACF,UAAM,EAAE,IAAI,IAAI,MAAM;AAEtB,UAAM,KAAK,IAAI,SAAS;AAAA,MACtB,QAAQ,QAAQ,IAAI;AAAA,MACpB,aAAa;AAAA,QACX;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAED,UAAM,UAAU,IAAI,iBAAiB;AAAA,MACjC,QAAQ,QAAQ,IAAI;AAAA,MACpB,KAAK;AAAA,IACT,CAAC;AAED,UAAM,MAAM,MAAM,aAAa,IAAI,SAAS,EAAE,WAAW,IAAI,CAAC;AAC9D,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,EAAE,iBAAiB,sBAAsB;AAAA,IACpD;AAAA,EACF,SAAS,KAAK;AACZ,YAAQ,MAAM,aAAa;AAAA,MACzB,SAAS,IAAI;AAAA,MACb,OAAO,IAAI;AAAA,MACX,aAAa,MAAM;AAAA,IACrB,CAAC;AACD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,IAAI;AAAA,QACX,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
