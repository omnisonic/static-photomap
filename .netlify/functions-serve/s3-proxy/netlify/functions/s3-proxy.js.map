{
  "version": 3,
  "sources": ["../../../../../../Users/omnisonic/Documents/code/MyWebDev/netlify/static-photomap/netlify/functions/s3-proxy.js"],
  "sourceRoot": "/var/folders/p2/rb51ss5j06g5b88970q9ft8r0000gn/T/tmp-48916-i02HzLL8k9NE",
  "sourcesContent": ["const { S3Client, GetObjectCommand } = require('@aws-sdk/client-s3');\nconst { getSignedUrl } = require('@aws-sdk/s3-request-presigner');\n\n// Get AWS credentials and S3 config - use only custom variable names for Netlify\n// This avoids Netlify's reserved AWS environment variables entirely\nconst accessKeyId = process.env.MY_AWS_ACCESS_KEY_ID;\nconst secretAccessKey = process.env.MY_AWS_SECRET_ACCESS_KEY;\nconst s3Region = process.env.MY_S3_REGION;\nconst s3Bucket = process.env.MY_S3_BUCKET;\n\n// Debug logging (will appear in Netlify function logs)\nconsole.log('Environment check:', {\n  hasMyAccessKey: !!process.env.MY_AWS_ACCESS_KEY_ID,\n  hasMySecretKey: !!process.env.MY_AWS_SECRET_ACCESS_KEY,\n  hasMyRegion: !!process.env.MY_S3_REGION,\n  hasMyBucket: !!process.env.MY_S3_BUCKET,\n  accessKeyPrefix: accessKeyId ? accessKeyId.substring(0, 8) + '...' : 'undefined'\n});\n\n// Validate environment variables\nif (!accessKeyId) {\n  throw new Error('Missing MY_AWS_ACCESS_KEY_ID environment variable. Set this in Netlify dashboard.');\n}\nif (!secretAccessKey) {\n  throw new Error('Missing MY_AWS_SECRET_ACCESS_KEY environment variable. Set this in Netlify dashboard.');\n}\nif (!s3Region) {\n  throw new Error('Missing MY_S3_REGION environment variable. Set this in Netlify dashboard.');\n}\nif (!s3Bucket) {\n  throw new Error('Missing MY_S3_BUCKET environment variable. Set this in Netlify dashboard.');\n}\n\nexports.handler = async (event, context) => {\n  try {\n    // Check for session token in headers\n    const authHeader = event.headers.authorization || event.headers.Authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return {\n        statusCode: 401,\n        body: JSON.stringify({ error: 'Authentication required' })\n      };\n    }\n\n    const { key } = event.queryStringParameters;\n\n    const s3 = new S3Client({\n      region: s3Region,\n      credentials: {\n        accessKeyId,\n        secretAccessKey\n      }\n    });\n\n    const command = new GetObjectCommand({\n        Bucket: s3Bucket,\n        Key: key\n    });\n\n    const url = await getSignedUrl(s3, command, { expiresIn: 900 });\n    return {\n      statusCode: 200,\n      body: url,\n      headers: { 'Cache-Control': 'public, max-age=300' }\n    };\n  } catch (err) {\n    console.error('S3 Error:', {\n      message: err.message,\n      stack: err.stack,\n      queryParams: event.queryStringParameters\n    });\n    return {\n      statusCode: 500,\n      body: JSON.stringify({\n        error: err.message,\n        details: 'Check function logs'\n      })\n    };\n  }\n};\n"],
  "mappings": ";AAAA,IAAM,EAAE,UAAU,iBAAiB,IAAI,QAAQ,oBAAoB;AACnE,IAAM,EAAE,aAAa,IAAI,QAAQ,+BAA+B;AAIhE,IAAM,cAAc,QAAQ,IAAI;AAChC,IAAM,kBAAkB,QAAQ,IAAI;AACpC,IAAM,WAAW,QAAQ,IAAI;AAC7B,IAAM,WAAW,QAAQ,IAAI;AAG7B,QAAQ,IAAI,sBAAsB;AAAA,EAChC,gBAAgB,CAAC,CAAC,QAAQ,IAAI;AAAA,EAC9B,gBAAgB,CAAC,CAAC,QAAQ,IAAI;AAAA,EAC9B,aAAa,CAAC,CAAC,QAAQ,IAAI;AAAA,EAC3B,aAAa,CAAC,CAAC,QAAQ,IAAI;AAAA,EAC3B,iBAAiB,cAAc,YAAY,UAAU,GAAG,CAAC,IAAI,QAAQ;AACvE,CAAC;AAGD,IAAI,CAAC,aAAa;AAChB,QAAM,IAAI,MAAM,mFAAmF;AACrG;AACA,IAAI,CAAC,iBAAiB;AACpB,QAAM,IAAI,MAAM,uFAAuF;AACzG;AACA,IAAI,CAAC,UAAU;AACb,QAAM,IAAI,MAAM,2EAA2E;AAC7F;AACA,IAAI,CAAC,UAAU;AACb,QAAM,IAAI,MAAM,2EAA2E;AAC7F;AAEA,QAAQ,UAAU,OAAO,OAAO,YAAY;AAC1C,MAAI;AAEF,UAAM,aAAa,MAAM,QAAQ,iBAAiB,MAAM,QAAQ;AAChE,QAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,0BAA0B,CAAC;AAAA,MAC3D;AAAA,IACF;AAEA,UAAM,EAAE,IAAI,IAAI,MAAM;AAEtB,UAAM,KAAK,IAAI,SAAS;AAAA,MACtB,QAAQ;AAAA,MACR,aAAa;AAAA,QACX;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAED,UAAM,UAAU,IAAI,iBAAiB;AAAA,MACjC,QAAQ;AAAA,MACR,KAAK;AAAA,IACT,CAAC;AAED,UAAM,MAAM,MAAM,aAAa,IAAI,SAAS,EAAE,WAAW,IAAI,CAAC;AAC9D,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM;AAAA,MACN,SAAS,EAAE,iBAAiB,sBAAsB;AAAA,IACpD;AAAA,EACF,SAAS,KAAK;AACZ,YAAQ,MAAM,aAAa;AAAA,MACzB,SAAS,IAAI;AAAA,MACb,OAAO,IAAI;AAAA,MACX,aAAa,MAAM;AAAA,IACrB,CAAC;AACD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,IAAI;AAAA,QACX,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
